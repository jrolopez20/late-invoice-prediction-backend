{
	"info": {
		"_postman_id": "3b9ffc33-1e67-432d-8514-609f790602a3",
		"name": "Late invoice prediction",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28416109"
	},
	"item": [
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": {
						"value": "BLUw/sPV3gMfRArF6Q5r2WAUwCBp0Lra5-69A4oJr!PMW60PFHDefeTX1J9-x=wiQ=ReuMxFsvrX!5EGj0PXcMOmo9EsBzL!WSalcXTeHqOFkl8Dpa-lf?dSe7SqbN6L8XWpVhGdzyJRQIAhO/N72xabJfqGT64FA!-lbEm2-jWsj-vsREz5WIRmwYVEWW4v6faqSJ/87XBqj9-gMScG1vmRxU!pasqwPgjU8Z37strA42/A8oqNq09U/9tmiW=EtSCcjLgNIfoNleFp!0nxt-sghqWj!kM!9fM3tpJ/wss1r/O9F-BE0pAKVRxhKbZilWkFRH8iC4h-ADzMNF=kRQc?4p6lAZ4?0oKnJ9Kztw=Yr=VAaDUt8cFVF/bC23IVMBXmZoFB7n?iSEzqT/ocSDzbl2!pqyqBh5SL!NvM!Jjpxy2dbdseYnR1V3x2gUq84wPvEVc4Gwb6ZF115SYykdfeHqT/7NeF4V/wjPy6GR0-9gd!7X8nVSrRWsyXB=84",
						"key": "API-KEY",
						"in": "header"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"folio\": \"XXX01\",\n    \"factura_importe\": 120,\n    \"fecha_fin\": \"2023/02/01\",\n    \"fecha_inicio\": \"2022/11/01\",\n    \"fecha_nacimiento\": \"1985/12/04\",\n    \"linea_limite\": 2566000,\n    \"pagador_rfc\": \"XSASD324\",\n    \"porcentaje_adelanto\": 1500\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/predict",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nIf successful POST request returns a `200 OK.`\n\nIf params are invalids returns a `400 Bad Request.`\n\nAn `API Key` is requerid for authorization\n\n### Params description\n\n| Param name | type | **Example value** | **Description** |\n| --- | --- | --- | --- |\n| folio | string | MLG163178 | Invoice folio |\n| factura_importe | number | 26680.00 | Invoice amount |\n| fecha_inicio | date (YYYY/MM/DD) | 2019/11/23 | Invoice start date |\n| fecha_fin | date (YYYY/MM/DD) | 2023/02/01 | Invoice end date |\n| fecha_nacimiento | date (YYYY/MM/DD) | 1985/12/04 | DOB of the client |\n| linea_limite | number | 20000000 | limit of the line |\n| pagador_rfc | string | IRD100119JE0 | Payer RFC |\n| porcentaje_adelanto | number | 0.95 | Advance percentage |"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}